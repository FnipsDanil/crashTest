"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON –∏ —Ä–∞—Å—á—ë—Ç–∞ —Ü–µ–Ω –≤ –∑–≤—ë–∑–¥–∞—Ö
"""
import os
import time
import asyncio
import aiohttp
import logging
from decimal import Decimal, ROUND_UP
from typing import Optional

logger = logging.getLogger(__name__)

class TonPriceService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–∞–º–∏ TON"""
    
    COINGECKO_API_URL = "https://api.coingecko.com/api/v3/coins/the-open-network"
    
    def __init__(self):
        # –¶–µ–Ω–∞ –æ–¥–Ω–æ–π –∑–≤–µ–∑–¥—ã –≤ USD (–∏–∑ .env)
        self.star_price_usd = Decimal(os.getenv('STAR_PRICE_USD', '0.015'))
        # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ TON/USD
        self._cached_rate = None
        self._cache_timestamp = 0
        self._cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
    
    async def get_ton_usd_rate(self) -> Optional[Decimal]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å TON/USD —Å CoinGecko API —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ retry"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if (self._cached_rate is not None and 
            current_time - self._cache_timestamp < self._cache_ttl):
            logger.debug(f"üìà Using cached TON/USD rate: {self._cached_rate}")
            return self._cached_rate
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –∫—É—Ä—Å —Å retry
        for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏
            try:
                
                async with aiohttp.ClientSession() as session:
                    async with session.get(
                        self.COINGECKO_API_URL,
                        timeout=aiohttp.ClientTimeout(total=15)  # –£–≤–µ–ª–∏—á–µ–Ω timeout
                    ) as response:
                        if response.status == 200:
                            data = await response.json()
                            ton_usd_rate = Decimal(str(data['market_data']['current_price']['usd']))
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                            self._cached_rate = ton_usd_rate
                            self._cache_timestamp = current_time
                            
                            return ton_usd_rate
                        else:
                            logger.warning(f"‚ö†Ô∏è CoinGecko API error: status {response.status}")
                            
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Attempt {attempt + 1} failed: {e}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –ø–µ—Ä–µ–¥ retry
                if attempt < 2:
                    await asyncio.sleep(1)  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
        if self._cached_rate is not None:
            logger.warning(f"‚ö†Ô∏è Using stale cached TON/USD rate: {self._cached_rate}")
            return self._cached_rate
            
        logger.error("‚ùå Failed to fetch TON/USD rate after all retries and no cache available")
        return None
    
    def calculate_stars_price(self, usd_price: Decimal, ton_usd_rate: Decimal = None) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –≤ –∑–≤—ë–∑–¥–∞—Ö –∏–∑ —Ü–µ–Ω—ã –≤ USD
        
        –§–æ—Ä–º—É–ª–∞:
        1. –¶–µ–Ω–∞ —É–∂–µ –≤ USD (ton_price —Ç–µ–ø–µ—Ä—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ USD)
        2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º USD –≤ –∑–≤—ë–∑–¥—ã: usd_price / star_price_usd
        3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Ü–µ–Ω–∫—É +20%
        4. –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ +25 –∑–≤—ë–∑–¥
        5. –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
        
        Args:
            usd_price: –¶–µ–Ω–∞ –≤ USD (—Ä–∞–Ω–µ–µ –Ω–∞–∑—ã–≤–∞–ª–∞—Å—å ton_price, –Ω–æ —Ç–µ–ø–µ—Ä—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ USD)
            ton_usd_rate: –ö—É—Ä—Å TON/USD (–±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        """
        try:
            logger.debug(f"üí± Price in USD: ${usd_price}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º USD –≤ –∑–≤—ë–∑–¥—ã
            stars_base = usd_price / self.star_price_usd
            logger.debug(f"üíé ${usd_price} USD = {stars_base} stars (base)")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Ü–µ–Ω–∫—É 20%
            stars_with_markup = stars_base * Decimal('1.20')
            logger.debug(f"üí∞ With 20% markup: {stars_with_markup} stars")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 25 –∑–≤—ë–∑–¥
            stars_final = stars_with_markup + Decimal('25')
            logger.debug(f"‚≠ê With +25 stars: {stars_final} stars")
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
            stars_rounded = int(stars_final.quantize(Decimal('1'), rounding=ROUND_UP))
            
            return stars_rounded
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating stars price: {e}")
            raise
    
    async def get_stars_price_for_ton(self, ton_price: Decimal) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –≤ –∑–≤—ë–∑–¥–∞—Ö –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã –≤ USD
        
        Args:
            ton_price: –¶–µ–Ω–∞ –≤ USD (–ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ton_price –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç USD)
            
        Returns:
            –¶–µ–Ω–∞ –≤ –∑–≤—ë–∑–¥–∞—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            return self.calculate_stars_price(ton_price)
        except Exception as e:
            logger.error(f"‚ùå Cannot calculate stars price: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
ton_price_service = TonPriceService()